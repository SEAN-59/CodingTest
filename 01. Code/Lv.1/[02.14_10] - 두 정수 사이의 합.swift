import Foundation

/*
 제목: 두 정수 사이의 합
 난도: Lv.1 / 완료한 사람: 약 63,000명 / 정답률: 87%
 
 [문제]
 두 정수 a, b가 주어졌을 때 a와 b 사이에 속한 모든 정수의 합을 리턴하는 함수, solution을 완성하세요.
 예를 들어 a = 3, b = 5인 경우, 3 + 4 + 5 = 12이므로 12를 리턴합니다.
 
 [제한]
 a와 b가 같은 경우는 둘 중 아무 수나 리턴하세요.
 a와 b는 -10,000,000 이상 10,000,000 이하인 정수입니다.
 a와 b의 대소관계는 정해져있지 않습니다.
 
 [입출력 예]
 a    b    return
 3    5    12
 3    3    3
 5    3    12
 */

/*
func solution(_ a:Int, _ b:Int) -> Int64 {
    var value = (a, b)
    var result = 0
    if a == b { return Int64(a) }
    if a > b { value = (b,a) }
    for i in value.0 ... value.1 { result += i }
    return Int64(result)
}
*/
//(가장 큰수 + 가장 작은 수) * (전체 갯수 / 2) (+ if 갯수가 짝수가 아니라면 가운데 수)
func solution(_ a:Int, _ b:Int) -> Int64 {
    var result = 0
    var value = (a, b)
    var count = value.1 - value.0 + 1
    
    if a == b { return Int64(a) }
    if a > b { 
        value = (b,a)
        count = value.1 - value.0 + 1
    }
    let temp = (value.0+value.1) * (count/2)
    result = count%2 == 0 ? temp : temp + (value.0+value.1)/2
    
    return Int64(result)
}

print("A = \(solution(3,5))") // 12
print("A = \(solution(3,3))") // 3
print("A = \(solution(5,3))") // 12


/*
 [결과] - 단순 for 문
 정확성  테스트
 테스트 1 〉    통과 (0.01ms, 16.3MB)
 테스트 2 〉    통과 (0.02ms, 16.4MB)
 테스트 3 〉    통과 (0.01ms, 16.2MB)
 테스트 4 〉    통과 (120.76ms, 16.3MB)
 테스트 5 〉    통과 (76.30ms, 16.4MB)
 테스트 6 〉    통과 (65.31ms, 16.4MB)
 테스트 7 〉    통과 (31.30ms, 16.4MB)
 테스트 8 〉    통과 (50.27ms, 16.4MB)
 테스트 9 〉    통과 (36.44ms, 16.4MB)
 테스트 10 〉    통과 (8.59ms, 16.4MB)
 테스트 11 〉    통과 (0.04ms, 16.3MB)
 테스트 12 〉    통과 (0.09ms, 16.4MB)
 테스트 13 〉    통과 (0.05ms, 16.3MB)
 테스트 14 〉    통과 (0.02ms, 16.3MB)
 테스트 15 〉    통과 (0.02ms, 16.4MB)
 테스트 16 〉    통과 (0.02ms, 16.3MB)
 
 [결과] - 로직 추가
 정확성  테스트
 테스트 1 〉    통과 (0.01ms, 16.4MB)
 테스트 2 〉    통과 (0.01ms, 16.4MB)
 테스트 3 〉    통과 (0.02ms, 16.2MB)
 테스트 4 〉    통과 (0.01ms, 16.2MB)
 테스트 5 〉    통과 (0.01ms, 16.6MB)
 테스트 6 〉    통과 (0.01ms, 16.6MB)
 테스트 7 〉    통과 (0.01ms, 16.5MB)
 테스트 8 〉    통과 (0.01ms, 16.3MB)
 테스트 9 〉    통과 (0.01ms, 16.6MB)
 테스트 10 〉    통과 (0.01ms, 16.2MB)
 테스트 11 〉    통과 (0.00ms, 16.3MB)
 테스트 12 〉    통과 (0.00ms, 16.3MB)
 테스트 13 〉    통과 (0.00ms, 16.2MB)
 테스트 14 〉    통과 (0.01ms, 16.4MB)
 테스트 15 〉    통과 (0.01ms, 16.4MB)
 테스트 16 〉    통과 (0.01ms, 16.3MB)
 */

/*
 [해설]
 중간에 시간이 많이 나온 경우에는 위의 코드가 무식한 방법으로 문제를 해결하기 때문에 그만큼 숫자를 하나하나 다 더해서 해당 문제가 발생하는 듯 한데 이거는 수정을 해서(1~10까지 다 더하는거 할때 쓰는 알고리즘 하면 됨) 다시 맞춰봐야겠음
 
 -<추가>-
 1 ~ 10 의 정수를 다 더하는 작업을 할 때 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 이렇게 해도 되는데 이는 숫자의 갯수가 작을때나 사용이 가능한 방법이고 (가장 큰수 + 가장 작은 수) * (전체 갯수 / 2) (+ if 갯수가 짝수가 아니라면 가운데 수) 하면 됨
 두 수 사이의 정수의 갯수를 카운트 하는 방법은 큰수 - 작은수 + 1 해주면 됨 (10 - 1 + 1 = 10)
 3~5: 3,4,5 = 3개 >> 5-3+1 = 3
 11~17: 11,12,13,14,15,16,17 = 7개 >> 17-11+1 =7
 -4~3: -4,-3,-2,-1,0,1,2,3 = 8개 >> 3--4+1 = 8
 가운데 수 구하는 방법은 (큰수 + 작은수)/2 하면 그게 중간 값임
 1,2,3,4,5 > 중간값 = (1+5) / 2 = 3
 
 */
