import Foundation

/*
 제목: 약수의 합
 난도: Lv.1 / 완료한 사람: 약 64,000명 / 정답률: 87%
 
 [문제]
 정수 n을 입력받아 n의 약수를 모두 더한 값을 리턴하는 함수, solution을 완성해주세요.
 
 [제한]
 n은 0 이상 3000이하인 정수입니다.
 
 [입출력 예]
 n    return
 12    28
 5    6
 
 */

func solution(_ n:Int) -> Int {
    if n == 0 || n == 1 { return n }
    
    var sqrtNum = Int(sqrt(Double(n)))
    var resultArr = [Int]()
    
    for i in 1 ... sqrtNum {
        if n%i == 0 {
            resultArr.append(i)
            resultArr.append(n/i)
        }
    }
    return Set(resultArr).reduce(0){$0+$1}
}


print("A = \(solution(2))")


/*
 [결과]
 정확성  테스트
 테스트 1 〉    통과 (0.01ms, 16.1MB)
 테스트 2 〉    통과 (0.07ms, 16.6MB)
 테스트 3 〉    통과 (0.07ms, 16.4MB)
 테스트 4 〉    통과 (0.08ms, 16.5MB)
 테스트 5 〉    통과 (0.10ms, 16.4MB)
 테스트 6 〉    통과 (0.07ms, 16.5MB)
 테스트 7 〉    통과 (0.07ms, 16.4MB)
 테스트 8 〉    통과 (0.07ms, 16.5MB)
 테스트 9 〉    통과 (0.07ms, 16.5MB)
 테스트 10 〉    통과 (0.08ms, 16.5MB)
 테스트 11 〉    통과 (0.10ms, 16.5MB)
 테스트 12 〉    통과 (0.10ms, 16.6MB)
 테스트 13 〉    통과 (0.07ms, 16.4MB)
 테스트 14 〉    통과 (0.07ms, 16.3MB)
 테스트 15 〉    통과 (0.06ms, 16.3MB)
 테스트 16 〉    통과 (0.01ms, 16.3MB)
 테스트 17 〉    통과 (0.07ms, 16.6MB)
 */

/*
 [해설]
 약수 문제 풀때는 1부터 n까지 나누는 순차 확인 방법을 사용할 수 있으나 해당 방법은 수가 커지면 커질 수록 그 반복의 수가 늘어나는 O(N)의 복잡도를 가지게 되나
 해당 문제는 n 의 제곱근을 가지고 푸는데에 그 해답이 있다.
 100으로 예를 들어보자면 100의 제곱근은 10이고 1부터 10까지의 수로만 나눠서 나머지가 0인 값과 나눈 몫으로 약수를 구성하면 된다.
 100 % 1 = 0   > 100 / 1 = 100
 100 % 2 = 0   > 100 / 2 = 50
 100 % 3 = 1
 100 % 4 = 0   > 100 / 4 = 25
 100 % 5 = 0   > 100 / 5 = 20
 100 % 6 = 4
 100 % 7 = 2
 100 % 8 = 4
 100 % 9 = 1
 100 % 10 = 0  > 100 / 10 = 10
 [1, 100, 2, 50, 4, 25, 5, 20, 10, 10]
 해당 배열을 오름차순 정렬 = [1, 2, 4, 5, 10, 10, 20, 25, 50, 100]
 하지만 약수에는 중복되는 수가 존재하지 않기에 Set() 씌워주면 100의 약수로 구성된 배열은 다음과 같다.
 [1, 2, 4, 5, 10, 20, 25, 50, 100]
 위와 같은 방법으로 문제를 해결하면 O(√N)의 복잡도를 가지게 된다.
 */
