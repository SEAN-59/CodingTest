import Foundation

/*
 제목: n^2 배열 자르기
 난도: Lv.2 / 완료한 사람: 약 11,000명 / 정답률: 65%
 기출문제: 월간 코드 챌린지 시즌 3
 
 [문제]
 정수 n, left, right가 주어집니다. 다음 과정을 거쳐서 1차원 배열을 만들고자 합니다.

 n행 n열 크기의 비어있는 2차원 배열을 만듭니다.
 i = 1, 2, 3, ..., n에 대해서, 다음 과정을 반복합니다.
 1행 1열부터 i행 i열까지의 영역 내의 모든 빈 칸을 숫자 i로 채웁니다.
 1행, 2행, ..., n행을 잘라내어 모두 이어붙인 새로운 1차원 배열을 만듭니다.
 새로운 1차원 배열을 arr이라 할 때, arr[left], arr[left+1], ..., arr[right]만 남기고 나머지는 지웁니다.
 정수 n, left, right가 매개변수로 주어집니다. 주어진 과정대로 만들어진 1차원 배열을 return 하도록 solution 함수를 완성해주세요.
 
 [제한]
 1 ≤ n ≤ 107
 0 ≤ left ≤ right < n2
 right - left < 105
 
 [입출력 예]
 n    left    right    result
 3    2    5    [3,2,2,3]
 4    7    14    [4,3,3,3,4,4,4,4]

 000
 000
 000
 
 123 223 333 -> 2~5 = 12 3223 333 -> 0~8 = 3^2 -> 2~5
 2~5 -> (0,2) ~ (2,0) =
    n = 3
    0,2: 2 (i*n + j) = 3
    1,0: 3 (i*n + j) = 2
    1,1: 4           = 2
    1,2: 5           = 3
  left = 2 -> i*3 + j = 2 -> i*3 = 2-0
 j = 2 - i*3
 
 값 = v = 3
 v/n = 1
 j 는 i가 있으니까 0*3 +j = 2 :j =2
 1 = v - i*3

 1234 2234 3334 4444 (7,14) -> 1234 223 43334444 4
 
 v= 4 = i*n + j
 12345 22345 33345 44445 55555
 12[345 2]2345 33345 44445 55555
 12345 22[345 33345 4]4445 55555
 */

func solution(_ n:Int, _ left:Int64, _ right:Int64) -> [Int] {
    var result = [Int]()
    for i in left ... right {
        let value = Int(i)
        var coord = (value/n, value%n)
        let sum = coord.0 >= coord.1 ? coord.0+1 : ((coord.0+1)+coord.1)
        if coord.0 < coord.1 {
            result.append(1 + coord.1)
        }
        else if coord.0 >= coord.1 {
            result.append(coord.0+1)
        }
    }
    return result
}

print("A = \(solution(3,2,5))")
print("A = \(solution(4,7,14))")
print("A = \(solution(5,7,15))")

/*
 [결과]
 정확성  테스트
 테스트 1 〉    통과 (54.21ms, 33.2MB)
 테스트 2 〉    통과 (57.45ms, 34.8MB)
 테스트 3 〉    통과 (57.28ms, 34.8MB)
 테스트 4 〉    통과 (0.13ms, 16.4MB)
 테스트 5 〉    통과 (0.13ms, 16.4MB)
 테스트 6 〉    통과 (56.42ms, 33.6MB)
 테스트 7 〉    통과 (82.34ms, 35.2MB)
 테스트 8 〉    통과 (67.45ms, 33.5MB)
 테스트 9 〉    통과 (58.63ms, 34.4MB)
 테스트 10 〉    통과 (55.27ms, 34.1MB)
 테스트 11 〉    통과 (53.69ms, 33.9MB)
 테스트 12 〉    통과 (55.77ms, 31.7MB)
 테스트 13 〉    통과 (65.60ms, 33.4MB)
 테스트 14 〉    통과 (48.96ms, 32.8MB)
 테스트 15 〉    통과 (49.08ms, 32.3MB)
 테스트 16 〉    통과 (51.16ms, 33.1MB)
 테스트 17 〉    통과 (51.27ms, 33.2MB)
 테스트 18 〉    통과 (65.85ms, 34.5MB)
 테스트 19 〉    통과 (62.41ms, 33.8MB)
 테스트 20 〉    통과 (54.25ms, 31.8MB)
 */

/*
 [해설]
 최대한 줄이는게 핵심임
 */
